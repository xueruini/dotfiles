# -*- mode: ruby -*-
# vi: set ft=ruby :

# XRN: install plugin
#  - vagrant-disksize
#  - vagrant-vbguest
required_plugins = %w( vagrant-disksize vagrant-vbguest )
required_plugins.each do |plugin|
  unless Vagrant.has_plugin?(plugin)
    raise "#{plugin} is not installed!"
  end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = "rtlbuilder"
  config.disksize.size = "40GB"
  # config.vbguest.auto_update = false
  # config.vbguest.installer_arguments = ['--nox11', '-- --do']

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    vb.name = "rtlbuilder-xenial64"
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
	# fix time shift
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 10000 ]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    ## supress the "unable to re-open stdin" warnings
    export DEBIAN_FRONTEND=noninteractive
    ## fix the boring locale warnings
    update-locale LANGUAGE=en_US.UTF-8 LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LC_CTYPE=en_US.UTF-8
    ## fix make menuconfig
    echo "TERM=xterm" >> /etc/environment
    echo "TERMINFO=/lib/terminfo" >> /etc/environment
    ## install dependencies
    ## since 16.04, use --add-architecture to install 32bit libs
    dpkg --add-architecture i386
    ## for 32bit
    apt-get install -y libstdc++6:i386 libc6:i386 zlib1g:i386
    ## add git-lfs
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
    ## for latest git
    add-apt-repository -y ppa:git-core/ppa
    apt-get update
    apt-get upgrade -y
    apt-get install -y build-essential flex bison gperf make cmake automake pkg-config
    apt-get install -y binutils gawk patch bzip2 gettext unzip sharutils curl bc
    apt-get install -y git-core git-lfs tig repo subversion
    apt-get install -y libncurses5-dev zlib1g-dev libpcre3-dev libc6-dev
    apt-get install -y liblzma-dev swig quilt
    apt-get install -y python-pip python-yaml
    apt-get install -y libxml-parser-perl
    apt-get install -y ocaml-nox ocaml-nox ocaml ocaml-findlib
    apt-get install -y u-boot-tools device-tree-compiler mtd-utils

    # pip install -U pipenv
    ## install npm
    curl -sL https://deb.nodesource.com/setup_10.x | bash -
    apt-get install -y nodejs
    npm i -g npm@">=6.1.0"
    ## use bash instead of dash
    echo "dash dash/sh boolean false" | debconf-set-selections
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash
    ## set timezone
    timedatectl set-timezone Asia/Shanghai
    ## other tools for happy dev
    apt-get install -y clang-format-6.0 exuberant-ctags
    ## shfmt is available via snap
    snap install shfmt
  SHELL
end
